// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: preScanner.flex

import java.io.*;
import  java.io.IOException;
import java.util.HashMap;
import java.util.Map;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public  class PreScanner {
  public static String InputFileName;

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\4\1\5"+
    "\1\6\2\0\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\11\22\1\0"+
    "\1\23\1\24\1\25\1\26\2\0\1\27\3\30\1\31"+
    "\1\30\2\32\1\33\2\32\1\34\1\32\1\35\1\32"+
    "\1\36\1\32\1\37\5\32\1\40\2\32\1\41\1\42"+
    "\1\43\1\0\1\44\1\0\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\32\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\32\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\40\1\72\1\32\1\73\1\74"+
    "\1\75\7\0\1\1\32\0\1\1\u01df\0\1\1\177\0"+
    "\13\1\35\0\2\1\5\0\1\1\57\0\1\1\240\0"+
    "\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\2"+
    "\1\15\1\16\1\17\1\20\4\21\1\22\1\23\1\1"+
    "\15\21\1\24\1\1\1\25\1\26\1\0\1\27\1\30"+
    "\1\31\1\32\1\0\1\2\1\33\1\2\1\0\1\34"+
    "\1\35\1\36\3\21\1\0\13\21\1\37\15\21\1\40"+
    "\1\0\2\2\1\0\1\2\3\21\2\0\12\21\1\41"+
    "\1\21\1\42\1\21\1\43\11\21\1\0\1\2\3\21"+
    "\2\0\1\44\1\21\1\45\4\21\1\46\1\47\2\21"+
    "\1\50\1\51\1\52\4\21\1\53\1\54\1\55\2\21"+
    "\1\56\2\21\2\0\1\57\1\60\3\21\1\61\5\21"+
    "\1\62\3\21\2\0\2\21\1\63\1\64\1\21\1\65"+
    "\1\66\1\67\3\21\2\0\1\21\1\0\1\70\1\71"+
    "\1\21\1\72\1\73\1\74\1\75\1\0\1\21\1\0"+
    "\1\21\2\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\76\0\174\0\272\0\76\0\370\0\76"+
    "\0\76\0\u0136\0\u0174\0\76\0\u01b2\0\76\0\u01f0\0\u022e"+
    "\0\u026c\0\76\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0"+
    "\0\u041e\0\76\0\76\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744"+
    "\0\u0782\0\76\0\u07c0\0\76\0\76\0\u07fe\0\76\0\76"+
    "\0\76\0\76\0\u083c\0\u087a\0\76\0\u08b8\0\u08f6\0\76"+
    "\0\76\0\76\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a"+
    "\0\u0c98\0\u0364\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c"+
    "\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\76"+
    "\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u08f6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u0364\0\u1496\0\u0364\0\u14d4"+
    "\0\u0364\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686"+
    "\0\u16c4\0\u1702\0\u1740\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838"+
    "\0\u1876\0\u0364\0\u18b4\0\u0364\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u0364\0\u0364\0\u19ea\0\u1a28\0\u0364\0\u0364\0\u0364\0\u1a66"+
    "\0\u1aa4\0\u1ae2\0\u1b20\0\u0364\0\u0364\0\u0364\0\u1b5e\0\u1b9c"+
    "\0\u0364\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u0364\0\u0364\0\u1cd2"+
    "\0\u1d10\0\u1d4e\0\u0364\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u0364\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036"+
    "\0\u0364\0\u0364\0\u2074\0\u0364\0\u0364\0\u0364\0\u20b2\0\u20f0"+
    "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u0364\0\u0364\0\u2264"+
    "\0\u0364\0\76\0\76\0\u0364\0\u22a2\0\u22e0\0\u231e\0\u235c"+
    "\0\u239a\0\u231e\0\u0364";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\6\26\1\27\1\30\1\31"+
    "\1\26\1\32\1\2\1\33\1\34\1\26\1\35\1\36"+
    "\1\37\1\40\1\41\2\26\1\42\3\26\1\43\1\26"+
    "\1\44\1\45\1\46\1\47\1\26\1\50\1\51\1\26"+
    "\1\52\1\53\1\54\123\0\1\55\50\0\11\56\2\0"+
    "\27\56\1\0\16\56\1\0\2\56\1\0\7\56\1\0"+
    "\1\56\10\0\1\57\112\0\1\60\75\0\1\61\75\0"+
    "\1\62\63\0\1\63\4\0\1\64\4\0\1\65\67\0"+
    "\1\66\1\0\2\21\15\0\1\67\54\0\1\66\1\0"+
    "\2\21\100\0\1\70\75\0\1\71\75\0\1\72\71\0"+
    "\2\26\4\0\12\26\3\0\27\26\24\0\2\26\4\0"+
    "\12\26\3\0\5\26\1\73\21\26\24\0\2\26\4\0"+
    "\12\26\3\0\20\26\1\74\6\26\24\0\2\26\4\0"+
    "\12\26\3\0\5\26\1\75\21\26\47\0\1\76\52\0"+
    "\2\26\4\0\12\26\3\0\16\26\1\77\1\26\1\100"+
    "\1\26\1\101\4\26\24\0\2\26\4\0\12\26\3\0"+
    "\13\26\1\102\2\26\1\103\10\26\24\0\2\26\4\0"+
    "\12\26\3\0\5\26\1\104\10\26\1\105\3\26\1\106"+
    "\4\26\24\0\2\26\4\0\12\26\3\0\13\26\1\107"+
    "\13\26\24\0\2\26\4\0\12\26\3\0\1\26\1\110"+
    "\14\26\1\111\10\26\24\0\2\26\4\0\12\26\3\0"+
    "\6\26\1\112\5\26\1\113\1\114\4\26\1\115\4\26"+
    "\24\0\2\26\4\0\12\26\3\0\5\26\1\116\15\26"+
    "\1\117\3\26\24\0\2\26\4\0\12\26\3\0\20\26"+
    "\1\120\2\26\1\121\3\26\24\0\2\26\4\0\12\26"+
    "\3\0\5\26\1\122\21\26\24\0\2\26\4\0\12\26"+
    "\3\0\22\26\1\123\4\26\24\0\2\26\4\0\12\26"+
    "\3\0\10\26\1\124\7\26\1\125\6\26\24\0\2\26"+
    "\4\0\12\26\3\0\16\26\1\126\10\26\24\0\2\26"+
    "\4\0\12\26\3\0\10\26\1\127\16\26\77\0\1\130"+
    "\1\0\6\56\1\3\67\56\13\63\1\131\62\63\2\64"+
    "\1\3\1\132\72\64\17\0\1\66\1\0\2\133\6\0"+
    "\1\134\50\0\1\135\14\0\2\135\4\0\3\135\13\0"+
    "\6\135\44\0\2\26\4\0\12\26\3\0\25\26\1\136"+
    "\1\26\24\0\2\26\4\0\12\26\3\0\11\26\1\137"+
    "\15\26\24\0\2\26\4\0\12\26\3\0\1\26\1\140"+
    "\25\26\55\0\1\141\4\0\1\142\37\0\2\26\4\0"+
    "\12\26\3\0\16\26\1\143\10\26\24\0\2\26\4\0"+
    "\12\26\3\0\5\26\1\144\21\26\24\0\2\26\4\0"+
    "\12\26\3\0\16\26\1\145\10\26\24\0\2\26\4\0"+
    "\12\26\3\0\1\26\1\146\25\26\24\0\2\26\4\0"+
    "\12\26\3\0\15\26\1\147\11\26\24\0\2\26\4\0"+
    "\12\26\3\0\6\26\1\150\20\26\24\0\2\26\4\0"+
    "\12\26\3\0\23\26\1\151\3\26\24\0\2\26\4\0"+
    "\12\26\3\0\16\26\1\152\10\26\24\0\2\26\4\0"+
    "\12\26\3\0\21\26\1\153\5\26\24\0\2\26\4\0"+
    "\12\26\3\0\13\26\1\154\13\26\24\0\2\26\4\0"+
    "\12\26\3\0\20\26\1\155\6\26\24\0\2\26\4\0"+
    "\12\26\3\0\17\26\1\156\7\26\24\0\2\26\4\0"+
    "\12\26\3\0\22\26\1\157\4\26\24\0\2\26\4\0"+
    "\12\26\3\0\16\26\1\160\10\26\24\0\2\26\4\0"+
    "\12\26\3\0\25\26\1\161\1\26\24\0\2\26\4\0"+
    "\12\26\3\0\13\26\1\162\13\26\24\0\2\26\4\0"+
    "\12\26\3\0\11\26\1\163\15\26\24\0\2\26\4\0"+
    "\12\26\3\0\2\26\1\164\24\26\24\0\2\26\4\0"+
    "\12\26\3\0\22\26\1\165\4\26\24\0\2\26\4\0"+
    "\12\26\3\0\20\26\1\166\6\26\24\0\2\26\4\0"+
    "\12\26\3\0\11\26\1\167\15\26\24\0\2\26\4\0"+
    "\12\26\3\0\23\26\1\170\3\26\24\0\2\26\4\0"+
    "\12\26\3\0\11\26\1\171\15\26\24\0\2\26\4\0"+
    "\12\26\3\0\11\26\1\172\15\26\3\0\13\63\1\131"+
    "\4\63\1\3\55\63\2\0\1\3\114\0\2\133\6\0"+
    "\1\134\60\0\1\173\1\0\1\173\2\0\2\174\74\0"+
    "\2\26\4\0\1\175\11\26\3\0\27\26\24\0\2\26"+
    "\4\0\12\26\3\0\15\26\1\176\11\26\24\0\2\26"+
    "\4\0\12\26\3\0\4\26\1\177\22\26\72\0\1\200"+
    "\63\0\1\201\41\0\2\26\4\0\12\26\3\0\13\26"+
    "\1\202\13\26\24\0\2\26\4\0\12\26\3\0\1\26"+
    "\1\203\25\26\24\0\2\26\4\0\12\26\3\0\11\26"+
    "\1\204\15\26\24\0\2\26\4\0\12\26\3\0\21\26"+
    "\1\205\5\26\24\0\2\26\4\0\12\26\3\0\22\26"+
    "\1\206\4\26\24\0\2\26\4\0\12\26\3\0\11\26"+
    "\1\207\15\26\24\0\2\26\4\0\12\26\3\0\2\26"+
    "\1\210\24\26\24\0\2\26\4\0\12\26\3\0\11\26"+
    "\1\211\15\26\24\0\2\26\4\0\12\26\3\0\5\26"+
    "\1\212\21\26\24\0\2\26\4\0\12\26\3\0\21\26"+
    "\1\213\5\26\24\0\2\26\4\0\12\26\3\0\16\26"+
    "\1\214\10\26\24\0\2\26\4\0\12\26\3\0\2\26"+
    "\1\215\1\26\1\216\22\26\24\0\2\26\4\0\12\26"+
    "\3\0\13\26\1\217\13\26\24\0\2\26\4\0\12\26"+
    "\3\0\24\26\1\220\2\26\24\0\2\26\4\0\12\26"+
    "\3\0\13\26\1\221\13\26\24\0\2\26\4\0\12\26"+
    "\3\0\23\26\1\222\3\26\24\0\2\26\4\0\12\26"+
    "\3\0\11\26\1\223\15\26\24\0\2\26\4\0\12\26"+
    "\3\0\21\26\1\224\5\26\24\0\2\26\4\0\12\26"+
    "\3\0\5\26\1\225\21\26\24\0\2\26\4\0\12\26"+
    "\3\0\4\26\1\226\22\26\24\0\2\26\4\0\12\26"+
    "\3\0\13\26\1\227\13\26\24\0\2\174\74\0\2\26"+
    "\4\0\12\26\3\0\20\26\1\230\6\26\24\0\2\26"+
    "\4\0\12\26\3\0\22\26\1\231\4\26\24\0\2\26"+
    "\4\0\4\26\1\232\1\233\4\26\3\0\27\26\64\0"+
    "\1\234\75\0\1\235\35\0\2\26\4\0\12\26\3\0"+
    "\12\26\1\236\14\26\24\0\2\26\4\0\12\26\3\0"+
    "\21\26\1\237\5\26\24\0\2\26\4\0\12\26\3\0"+
    "\11\26\1\240\15\26\24\0\2\26\4\0\12\26\3\0"+
    "\15\26\1\241\11\26\24\0\2\26\4\0\12\26\3\0"+
    "\13\26\1\242\13\26\24\0\2\26\4\0\12\26\3\0"+
    "\5\26\1\243\21\26\24\0\2\26\4\0\12\26\3\0"+
    "\20\26\1\244\6\26\24\0\2\26\4\0\12\26\3\0"+
    "\1\26\1\245\25\26\24\0\2\26\4\0\12\26\3\0"+
    "\11\26\1\246\15\26\24\0\2\26\4\0\12\26\3\0"+
    "\20\26\1\247\6\26\24\0\2\26\4\0\12\26\3\0"+
    "\15\26\1\250\11\26\24\0\2\26\4\0\12\26\3\0"+
    "\5\26\1\251\21\26\24\0\2\26\4\0\12\26\3\0"+
    "\20\26\1\252\6\26\24\0\2\26\4\0\12\26\3\0"+
    "\15\26\1\253\11\26\24\0\2\26\4\0\12\26\3\0"+
    "\11\26\1\254\15\26\52\0\1\255\77\0\1\256\45\0"+
    "\2\26\4\0\12\26\3\0\15\26\1\257\11\26\24\0"+
    "\2\26\4\0\12\26\3\0\5\26\1\260\21\26\24\0"+
    "\2\26\4\0\12\26\3\0\5\26\1\261\21\26\24\0"+
    "\2\26\4\0\12\26\3\0\22\26\1\262\4\26\24\0"+
    "\2\26\4\0\12\26\3\0\22\26\1\263\4\26\24\0"+
    "\2\26\4\0\12\26\3\0\3\26\1\264\23\26\24\0"+
    "\2\26\4\0\12\26\3\0\15\26\1\265\11\26\24\0"+
    "\2\26\4\0\12\26\3\0\7\26\1\266\17\26\24\0"+
    "\2\26\4\0\12\26\3\0\1\26\1\267\25\26\24\0"+
    "\2\26\4\0\12\26\3\0\22\26\1\270\4\26\24\0"+
    "\2\26\4\0\12\26\3\0\15\26\1\271\11\26\47\0"+
    "\1\272\75\0\1\273\52\0\2\26\4\0\12\26\3\0"+
    "\23\26\1\274\3\26\4\0\4\275\14\0\2\26\4\0"+
    "\12\26\3\0\27\26\24\0\2\26\4\0\12\26\3\0"+
    "\5\26\1\276\21\26\24\0\2\26\4\0\12\26\3\0"+
    "\26\26\1\277\24\0\2\26\4\0\12\26\3\0\5\26"+
    "\1\300\21\26\24\0\2\26\4\0\12\26\3\0\5\26"+
    "\1\301\21\26\47\0\1\302\75\0\1\303\52\0\2\26"+
    "\4\0\12\26\3\0\5\26\1\304\21\26\4\0\4\275"+
    "\22\0\12\305\4\0\26\305\24\0\2\26\4\0\12\26"+
    "\3\0\7\26\1\306\17\26\4\0\4\307\14\0\2\305"+
    "\4\0\12\305\3\0\27\305\24\0\2\26\4\0\12\26"+
    "\3\0\5\26\1\310\21\26\3\0\1\311\1\312\2\307"+
    "\1\312\71\311\21\0\2\26\4\0\12\26\3\0\20\26"+
    "\1\313\6\26\3\0\2\311\2\0\72\311";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\1\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\7\1\2\11\16\1\1\11"+
    "\1\1\2\11\1\0\4\11\1\0\1\1\1\11\1\1"+
    "\1\0\3\11\3\1\1\0\31\1\1\11\1\0\2\1"+
    "\1\0\4\1\2\0\30\1\1\0\4\1\2\0\32\1"+
    "\2\0\17\1\2\0\13\1\2\0\1\1\1\0\4\1"+
    "\2\11\1\1\1\0\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer out = new StringBuffer();
    Map<String, String> definedMap = new HashMap<String, String>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PreScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF(String input) {
    if (!zzEOFDone) {
      zzEOFDone = true;

/*
    BufferedWriter bwr = new BufferedWriter(new FileWriter(new File("out/out.txt")));
try{
    bwr.write(out.toString());

}catch (Exeption e) {
    System.out.println(e);
}
*/    try{
        input.trim();
        String[] parts= input.split("/");
        String newInput= "PreScannedTests"+"/"+parts[1];
        File file = new File(newInput);
        file.createNewFile();
        FileWriter fileWriter= new FileWriter(file);
        fileWriter.write(out.toString());
        fileWriter.flush();
        fileWriter.close();
      }catch (Exception ex){
        System.out.println(ex.toString());
      }
      //System.out.println(out.toString());
      //System.out.println(input);


    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF(InputFileName);
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 64: break;
          case 2:
            { out.append(yytext());
            }
            // fall through
          case 65: break;
          case 3:
            { out.append("!");
            }
            // fall through
          case 66: break;
          case 4:
            { out.append("%");
            }
            // fall through
          case 67: break;
          case 5:
            { out.append("(");
            }
            // fall through
          case 68: break;
          case 6:
            { out.append(")");
            }
            // fall through
          case 69: break;
          case 7:
            { out.append("*");
            }
            // fall through
          case 70: break;
          case 8:
            { out.append("+");
            }
            // fall through
          case 71: break;
          case 9:
            { out.append(",");
            }
            // fall through
          case 72: break;
          case 10:
            { out.append("-");
            }
            // fall through
          case 73: break;
          case 11:
            { out.append(".");
            }
            // fall through
          case 74: break;
          case 12:
            { out.append("/");
            }
            // fall through
          case 75: break;
          case 13:
            { out.append(";");
            }
            // fall through
          case 76: break;
          case 14:
            { out.append("<");
            }
            // fall through
          case 77: break;
          case 15:
            { out.append("=");
            }
            // fall through
          case 78: break;
          case 16:
            { out.append(">");
            }
            // fall through
          case 79: break;
          case 17:
            { if(definedMap.containsKey(yytext())){
            out.append(definedMap.get(yytext()));
      }else{out.append(yytext());}
            }
            // fall through
          case 80: break;
          case 18:
            { out.append("[");
            }
            // fall through
          case 81: break;
          case 19:
            { out.append("]");
            }
            // fall through
          case 82: break;
          case 20:
            { out.append("{");
            }
            // fall through
          case 83: break;
          case 21:
            { out.append("}");
            }
            // fall through
          case 84: break;
          case 22:
            { out.append("!=");
            }
            // fall through
          case 85: break;
          case 23:
            { out.append("&&");
            }
            // fall through
          case 86: break;
          case 24:
            { out.append("*=");
            }
            // fall through
          case 87: break;
          case 25:
            { out.append("+=");
            }
            // fall through
          case 88: break;
          case 26:
            { out.append("-=");
            }
            // fall through
          case 89: break;
          case 27:
            { out.append("/=");
            }
            // fall through
          case 90: break;
          case 28:
            { out.append("<=");
            }
            // fall through
          case 91: break;
          case 29:
            { out.append("==");
            }
            // fall through
          case 92: break;
          case 30:
            { out.append(">=");
            }
            // fall through
          case 93: break;
          case 31:
            { out.append("if");
            }
            // fall through
          case 94: break;
          case 32:
            { out.append("||");
            }
            // fall through
          case 95: break;
          case 33:
            { out.append("for");
            }
            // fall through
          case 96: break;
          case 34:
            { out.append("int");
            }
            // fall through
          case 97: break;
          case 35:
            { out.append("new");
            }
            // fall through
          case 98: break;
          case 36:
            { out.append("bool");
            }
            // fall through
          case 99: break;
          case 37:
            { out.append("btoi");
            }
            // fall through
          case 100: break;
          case 38:
            { out.append("dtoi");
            }
            // fall through
          case 101: break;
          case 39:
            { out.append("else");
            }
            // fall through
          case 102: break;
          case 40:
            { out.append("itob");
            }
            // fall through
          case 103: break;
          case 41:
            { out.append("itod");
            }
            // fall through
          case 104: break;
          case 42:
            { out.append("null");
            }
            // fall through
          case 105: break;
          case 43:
            { out.append("this");
            }
            // fall through
          case 106: break;
          case 44:
            { out.append("true");
            }
            // fall through
          case 107: break;
          case 45:
            { out.append("void");
            }
            // fall through
          case 108: break;
          case 46:
            { out.append("Print");
            }
            // fall through
          case 109: break;
          case 47:
            { out.append("break");
            }
            // fall through
          case 110: break;
          case 48:
            { out.append("class");
            }
            // fall through
          case 111: break;
          case 49:
            { out.append("false");
            }
            // fall through
          case 112: break;
          case 50:
            { out.append("while");
            }
            // fall through
          case 113: break;
          case 51:
            { out.append("double");
            }
            // fall through
          case 114: break;
          case 52:
            { out.append("import");
            }
            // fall through
          case 115: break;
          case 53:
            { out.append("public");
            }
            // fall through
          case 116: break;
          case 54:
            { out.append("return");
            }
            // fall through
          case 117: break;
          case 55:
            { out.append("string");
            }
            // fall through
          case 118: break;
          case 56:
            { out.append("private");
            }
            // fall through
          case 119: break;
          case 57:
            { out.append("NewArray");
            }
            // fall through
          case 120: break;
          case 58:
            { out.append("ReadLine");
            }
            // fall through
          case 121: break;
          case 59:
            { out.append("__func__");
            }
            // fall through
          case 122: break;
          case 60:
            { out.append("__line__");
            }
            // fall through
          case 123: break;
          case 61:
            { out.append("continue");
            }
            // fall through
          case 124: break;
          case 62:
            { String definitionLine = yytext();
          definitionLine = definitionLine.trim();
          String[] newStr = definitionLine.split("\\s+");
          String definedWord = newStr[1];

          StringBuilder stringBuilder = new StringBuilder();
          for (int i = 2; i < newStr.length; i++) {
              stringBuilder.append(newStr[i]);
              stringBuilder.append(" ");
          }
          String definedValue = stringBuilder.toString();
          definedMap.put(definedWord,definedValue);
            }
            // fall through
          case 125: break;
          case 63:
            { out.append("ReadInteger");
            }
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    argv[0]= "tests/"+argv[0];
    InputFileName = argv[0];
    if (argv.length == 0) {
      System.out.println("Usage : java PreScanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < 1; i++) {
        PreScanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new PreScanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
