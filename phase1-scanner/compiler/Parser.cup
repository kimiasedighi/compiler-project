import java_cup.runtime.*;

parser code {:
    public Laxer laxer;
    public Parser (Laxer laxer){
        this.laxer = laxer;
    }
    @Override
    protected void report_expected_token_ids(){ }
:}
scan with {:return laxer.next_token();:}
init with {::}

/* terminals */

//Reserved Words:
terminal integer, double, boolean, string, void;
terminal CLASS, IMPORT, function, line;
terminal for, while, if, else, break, continue;
terminal return, new, this, null, newarray;
terminal readinteger, readline, print, dtoi, itod, btoi, itob;
terminal private, public;


//Relational Symbols:
terminal equal, notequal, less, greater, lessequal, greaterequal;

//Ligical Symbols:
terminal and, or, not;

//Arithmitic symbols:
terminal div, mul, add, sub, mod;

//Assignment Symbols
terminal assign, assignAdd, assignSub, assignMul, assignDiv;

//Other Symbols:
terminal semicolon, comma, leftbracket, rihgtbracket;
terminal dot, leftparanthesis, rightparanthesis, leftcurly, rightcurly;

//Identifier:
terminal identifier, define;

//Constants:
terminal intconst, doubleconst, stringconst, booleanconst;


/* Non terminals */

nonterminal Program, Macro;

// declarations and types
nonterminal Decl, VariableDecl, FunctionDecl, ClassDecl;

// define Variable
nonterminal Variable;

// types of definitions except void
nonterminal Type;

// args of functions
nonterminal Formals;

//statement block
nonterminal StatementBlock;

// methods and variables in class
nonterminal Field;

//public or private
nonterminal AccessMode;

//statement
nonterminal Statement;
nonterminal IfStatement, WhileStatement, ForStatement;
nonterminal BreakStatement, ContinueStatement, ReturnStatement ,PrintStatement;

//expressions
nonterminal Expression;
nonterminal LValue, Constant, Call, Actuals;

//plus
nonterminal DeclPlus, MacroPlus, ExpressionPlus, StatementPlus
            , IdPlus, FieldPlus, VariableDeclPlus, VariablePlus;

/**/

/* precedence  */
precedence left leftbracker;
precedence left comma;
precedence left assign, assignAdd, assignSub, assignMul, assignSub;
precedence left or;
precedence left and;
precedence left equal, notequal;
precedence left less, greater, lessequal, greaterequal;
precedence left add, sub;
precedence left mul, div, mod;
precedence left not;
precedence left leftparanthesis, rightparanthesis, dot;
/**/

start with Program;

Program  ::= DeclPlus
           | MacroPlus DeclPlus;

Decl ::= VariableDecl
       | FunctionDecl
       | ClassDecl;

DeclPlus ::= DeclPlus Decl
           | Decl;

Macro ::= IMPORT stringconst
        | define IdPlus
        | define;

MacroPlus ::= MacroPlus Macro
            | Macro;

IdPlus ::= identifier
         | IdPlus identifier;

VariableDecl ::= Variable semicolon;

VariableDeclPlus ::= VariableDeclPlus VariableDecl
                    | VariableDecl;

Variable ::= Type identifier;

Type ::= integer
       | double
       | boolean
       | string
       | identifier
       | Type leftbracket rihgtbracket;

FunctionDecl ::= Type identifier leftparanthesis Formals rightparanthesis StatementBlock
               | void identifier leftparanthesis Formals rightparanthesis StatementBlock;

Formals ::=  VariablePlus comma |;


VariablePlus ::= VariablePlus Variable | Variable;

ClassDecl ::= CLASS identifier leftcurly FieldPlus  rightcurly
            | CLASS identifier leftcurly rightcurly;

FieldPlus ::= FieldPlus Field | Field;

Field ::= AccessMode VariableDecl | AccessMode FunctionDecl;

AccessMode ::= private | public |;

StatementBlock ::= leftcurly rightcurly
            | leftcurly VariableDeclPlus rightcurly
            | leftcurly StatementPlus rightcurly
            | leftcurly VariableDeclPlus StatementPlus rightcurly;

StatementPlus ::= StatementPlus Statement
            | Statement;

Statement ::= Expression semicolon | semicolon | IfStatement | WhileStatement | ForStatement
            | BreakStatement | ContinueStatement | ReturnStatement | PrintStatement
            | StatementBlock;

IfStatement ::= if leftparanthesis Expression rightparanthesis  Statement
              | if leftparanthesis Expression rightparanthesis Statement else Statement;

WhileStatement::= while leftparanthesis Expression rightparanthesis Statement;

ForStatement ::= for leftparanthesis semicolon Expression semicolon rightparanthesis Statement
               | for leftparanthesis Expression semicolon Expression semicolon rightparanthesis Statement
               | for leftparanthesis  semicolon Expression semicolon Expression rightparanthesis Statement
               | for leftparanthesis Expression semicolon Expression semicolon Expression rightparanthesis Statement;

ReturnStatement ::= return semicolon
                  | return Expression semicolon;

BreakStatement ::= break semicolon;

ContinueStatement ::= continue semicolon;

PrintStatement ::= print leftparanthesis ExpressionPlus comma rightparanthesis SEMICOLON;

ExpressionPlus ::= ExpressionPlus Expression
                 | Expression ;


Expression ::= LValue assign Expression
             | LValue assignAdd Expression
             | LValue assignSub Expression
             | LValue assignMul Expression
             | LValue assignDiv Expression
             | Constant | LValue
             | this | Call
             | leftparanthesis Expression rightparanthesis
             | Expression add Expression | Expression sub Expression
             | Expression mul Expression | Expression DIV Expression | Expression MOD Expression
             | sub Expression
             | Expression less Expression | Expression lessequal Expression
             | Expression greater Expression | Expression greaterequal Expression
             | Expression equal Expression | Expression notequal Expression
             | Expression and Expression | Expression or Expression | not Expression
             | readinteger leftparanthesis rightparanthesis
             | readline leftparanthesis rightparanthesis
             | new identifier | newarray leftparanthesis Expression comma Type rightparanthesis
             | itod leftparanthesis Expression rightparanthesis
             | dtoi leftparanthesis Expression rightparanthesis
             | itob leftparanthesis Expression rightparanthesis
             | btoi leftparanthesis Expression rightparanthesis
             | line | function;

LValue ::= identifier
         | Expression dot identifier
         | Expression leftbracket Expression rihgtbracket;

Call ::= identifier leftparanthesis Actuals rightparanthesis
       | Expression dot identifier leftparanthesis Actuals rightparanthesis;

Actuals ::= ExpressionPlus comma | ;

Constant ::= intconst | doubleconst | booleanconst | stringconst | null;